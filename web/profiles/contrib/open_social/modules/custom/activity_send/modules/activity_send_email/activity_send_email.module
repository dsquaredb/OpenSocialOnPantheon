<?php

/**
 * @file
 * Contains activity_basics.module..
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\activity_creator\ActivityInterface;
use Drupal\message\Entity\Message;
use Drupal\activity_send_email\Plugin\ActivityDestination\EmailActivityDestination;
<<<<<<< HEAD
use Drupal\Core\Url;
use Drupal\Core\Link;
=======

/**
 * Implements hook_cron().
 *
 * This cronjob handles creating digest queue items to process.
 */
function activity_send_email_cron() {
  // Get plugins and their intervals.
  $emailfrequencymanager = \Drupal::service('plugin.manager.emailfrequency');
  $plugins = $emailfrequencymanager->getDefinitions();

  // Fill a sortable array with the data about the email frequency.
  foreach ($plugins as $frequency) {
    $instance = $emailfrequencymanager->createInstance($frequency['id']);
    /* @var \Drupal\activity_send_email\EmailFrequencyInterface $instance */
    $interval = $instance->getInterval();

    // If the interval of the EmailFrequency plugin is more than 0, we should
    // consider it to be a digest email.
    if ($interval > 0) {
      // Get last run time.
      $last_run = \Drupal::state()
        ->get('digest.' . $frequency['id'] . '.last_run', 0);

      // If interval of frequency passed since last time, try to create queue
      // items.
      if ((time() - $last_run) > $interval) {
        // Query to get the data to process per user per frequency. And we make
        // sure to check only for items that need to be sent.
        $db = Database::getConnection();
        $query = $db->select('user_activity_digest', 'uad')
          ->fields('uad', ['uid', 'activity'])
          ->condition('uad.frequency', $frequency['id'])
          ->condition('uad.timestamp', time() - $interval, '<=')
          ->orderBy('uad.timestamp', 'DESC');
        $activitities = $query->execute()->fetchAll();

        if (!empty($activitities)) {
          $queue_items = [];

          // Fill the queue items.
          foreach ($activitities as $activitity) {
            $queue_items[$activitity->uid]['uid'] = $activitity->uid;
            $queue_items[$activitity->uid]['frequency'] = $frequency['id'];
            $queue_items[$activitity->uid]['activities'][] = $activitity->activity;
          }

          // Add queue items to the queue worker.
          foreach ($queue_items as $queue_item) {
            // Add the item to the queue.
            $queue = \Drupal::queue('activity_digest_worker');
            $queue->createItem($queue_item);

            // Remove activities from digest table that we just put it in the
            // queue.
            $db->delete('user_activity_digest')
              ->condition('uid', $queue_item['uid'])
              ->condition('activity', $queue_item['activities'], 'IN')
              ->execute();
          }
        }

        // Update last run.
        \Drupal::state()
          ->set('digest.' . $frequency['id'] . '.last_run', time());
      }
    }
  }
}

/**
 * Implements hook_theme().
 */
function activity_send_email_theme() {
  $items = [
    'digestmail' => [
      'template' => 'digestmail',
      'variables' => [
        'notification_count' => NULL,
        'notifications' => NULL,
        'notification_settings' => NULL,
      ],
    ],
    'directmail' => [
      'template' => 'directmail',
      'variables' => [
        'notification' => NULL,
        'notification_settings' => NULL,
      ],
    ],
  ];
  return $items;
}
>>>>>>> Update Open Social to 8.x-2.1

/**
 * Implements hook_form_FORM_ID_alter() for user_form().
 */
function activity_send_email_form_user_form_alter(&$form, FormStateInterface $form_state) {
  $account = \Drupal::routeMatch()->getParameter('user');
  if (is_object($account)) {
    $form['email_notifications'] = array(
      '#type' => 'fieldset',
      '#title' => t('Email notifications'),
      '#tree' => TRUE,
    );

    $email_message_templates = EmailActivityDestination::getSendEmailMessageTemplates();
    $user_email_settings = EmailActivityDestination::getSendEmailUserSettings($account);

    // Build checkbox for each message template.
    foreach ($email_message_templates as $key => $title) {
      $form['email_notifications'][$key] = array(
        '#type' => 'checkbox',
        '#title_display' => 'before',
        '#title' => $title,
        '#default_value' => isset($user_email_settings[$key]) ? $user_email_settings[$key] : TRUE,
      );
    }

    // Submit function to save send email settings.
    $form['actions']['submit']['#submit'][] = '_activity_send_email_form_user_form_submit';
  }
}

/**
 * Form submit for user_form.
 *
 * @param array $form
 *   Commnent on a post form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Form state interface.
 */
function _activity_send_email_form_user_form_submit($form, FormStateInterface $form_state) {
  $account = \Drupal::routeMatch()->getParameter('user');
  $values = $form_state->getValue('email_notifications');

  if (is_object($account) && !empty($values)) {
    EmailActivityDestination::setSendEmailUserSettings($account, $values);
  }

}

/**
 * Implements hook_mail().
 */
function activity_send_email_mail($key, &$message, $params) {
  $options = array(
    'langcode' => $message['langcode'],
  );

  $variables = array(
    '%site_name' => \Drupal::config('system.site')->get('name'),
  );

  switch ($key) {
    case 'activity_send_email':
      // Mail subject.
      $message['subject'] = t('Notification from %site_name', $variables, $options);
      // Mail body.
      $message['body'][] = $params['body'];
      break;
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function activity_send_email_activity_insert(ActivityInterface $activity) {

  $destinations = $activity->getDestinations();
  if (in_array('email', $destinations)) {
    /* @var $activity_send_factory Drupal\activity_send\Plugin\ActivitySendManager */
    $activity_send_factory = \Drupal::service('plugin.manager.activity_send.processor');
    // Trigger the create action for entities.
    /* @var $create_action Drupal\activity_send\Plugin\ActivitySend\CreateActivitySend */
    $create_action = $activity_send_factory->createInstance('email_activity_send');
    $create_action->create($activity);
  }

}
